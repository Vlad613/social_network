{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.js","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","authReducer","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dialogReducer","dispatch","sendMessageCreator"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uICG9KC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,YAAYD,SAGjBE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,+FCP9DM,EAPI,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OAAO,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtC,kBAAC,IAAD,CAAST,GAAII,GAAOL,EAAMW,QCGnBC,EAJC,SAACZ,GACb,OAAO,yBAAKO,UAAWC,IAAEK,SAAUb,EAAMa,U,iCCFvCC,EAAcC,YAAiB,IAkBtBC,cAAU,CAACC,KAAK,2BAAhBD,EAhBQ,SAAChB,GACpB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAM,iBACNc,YAAa,wBAExB,6BACI,6CCWDC,EAtBC,SAAC1B,GACb,IAAIP,EAAQO,EAAM2B,YACdC,EAAkBnC,EAAMoC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMqB,IAAKD,EAAEzB,GAAIA,GAAIyB,EAAEzB,QACpF2B,EAAmBxC,EAAMyC,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASmB,IAAKG,EAAE7B,QAMnF,OACI,yBAAKC,UAAWC,IAAEqB,SACd,yBAAKtB,UAAWC,IAAE4B,cACbR,GAEL,yBAAKrB,UAAWC,IAAE0B,UACbD,GAEL,kBAAC,EAAD,CAAgBf,SAZJ,SAACmB,GACjBrC,EAAMsC,YAAYD,EAAOE,qB,wBCWlBC,sBAAQrC,aAfD,SAACV,GACnB,MAAO,CACHkC,YAAalC,EAAMgD,kBAIF,SAACC,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,EAASC,YAAmBJ,SAM6B3C,IAAtD4C,CACdd","file":"static/js/4.1e53ee68.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1_PMP\",\"dialogsItems\":\"Dialogs_dialogsItems__hrXmm\",\"active\":\"Dialogs_active__N6s1T\",\"messages\":\"Dialogs_messages__10AnQ\",\"message\":\"Dialogs_message__3B7Mq\"};","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.authReducer.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form:'dialog-add-message-form'}) (AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/DialogsReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogReducer\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)\r\n(Dialogs)\r\n;"],"sourceRoot":""}